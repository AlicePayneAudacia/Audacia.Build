parameters:
  projects: '**/*.csproj'
  configuration: 'release'
  testPath: '**/*Tests/*.csproj'
  skipDependencyChecks: false
  releaseBranchName: 'master'

steps:

  - template: /src/security/dependency-check/tasks/nuget-dependency-check.yaml
    parameters:
      skip: ${{ parameters.skipDependencyChecks }}

  - template: /src/build/dotnet/tasks/netcore/version.yaml
    parameters:
      releaseBranchNames: 'master,main'
      ExcludePreReleasePostfix: false
      workingDirectory: ''
      includeCsproj: true
      includeNuspec: false
      packageSource: 'public'
      excludePaths: '*.Tests.csproj'

  - task: DotNetCoreCLI@2
    displayName: .NET Restore
    inputs:
      command: restore
      projects: '${{parameters.projects}}'

  - task: DownloadSecureFile@1
    displayName: Get Strong Naming Certificate
    name: StrongNameCertificate
    inputs:
      secureFile: audacia.snk

  - task: MSBuild@1
    displayName: .NET Build
    inputs:
      solution: ${{parameters.projects}}
      msbuildArchitecture: x64
      configuration: ${{parameters.configuration}}
      msbuildArguments: /p:AssemblyOriginatorKeyFile=$(StrongNameCertificate.secureFilePath)

  - task: DotNetCoreCLI@2
    displayName: .NET Test
    condition: and(succeeded(), eq('${{ parameters.shouldRunTests }}', true))
    inputs:
      command: test
      projects: ${{ parameters.projects }}
      arguments: '--collect "Code coverage"'
      configuration: 'Release'

  - template: /src/build/dotnet/tasks/netcore/assembly-sign.yaml
    parameters:
      projects: '${{parameters.projects}}'

  - task: DotNetCoreCLI@2
    displayName: .NET Pack
    inputs:
      command: pack
      nobuild: true
      includesymbols: false
      packagesToPack: ${{parameters.projects}}

  - task: NuGetToolInstaller@1
    displayName: Get Nuget
    inputs:
      versionSpec: '4.9.3'

  - task: NuGetCommand@2
    displayName: NuGet Sign
    condition: and(succeeded(), and(not(eq(variables['Build.Reason'], 'PullRequest')), not(eq(variables['Build.Reason'], 'Schedule'))))
    inputs:
      command: 'custom'
      arguments: sign "$(build.ArtifactStagingDirectory)\*.nupkg" -CertificatePath "$(CodeSignCertificate.secureFilePath)" -CertificatePassword "$(CertificatePassword)" -Timestamper "http://timestamp.digicert.com"

  - template: /src/build/common/tasks/publish.yaml
    parameters:
      path: ''
      artifactName: '$(Build.DefinitionName)'